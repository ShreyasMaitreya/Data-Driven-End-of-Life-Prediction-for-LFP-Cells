#getting this error: RuntimeError: size mismatch, m1: [1 x 2201], m2: [1 x 1] at ..\aten\src\TH/generic/THTensorMath.cpp:41 will find out about this....
import torch as pt
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as graph

#this code is made considering constant i.e. temperature = 303K
#Nominal voltage of cell is 3.3V, charged in CC-CV at 1C current and discharged at 4C
#reference paper Severson et al. Data-driven prediction of battery cycle life before capacity degradation. Nature Energy volume 4, pages 383â€“391 (2019).
#current focus is on Lithium Iron Phosphate type of battery (LFP chemistry, but code can work for any chemistry and any on a battery pack of any size)
#dataset has been taken from https://data.matr.io/1
x = np.linspace(1, 2201, num = 2201) #easier to define linspace vector using numpy
N = pt.from_numpy(x.astype(np.double))    #conversion of numpy array to pytorch tensor
N = N.float()
SOH_actual = pt.tensorfloat()
print(x)
SOH = SOH_actual.numpy()
N_test = pt.tensor([2201], dtype = pt.double) 

n_samples = 2201
n_features = 1
print(n_samples, n_features)

#model (linear regression)
input_size = 1
output_size = n_features
model = nn.Linear(input_size, output_size)


#loss and optimizer, calculation of cost function
learning_rate  = 0.01
criterion = nn.MSELoss()
optimizer = pt.optim.SGD(model.parameters(), lr = learning_rate)

#training loop
num_epochs = 100
for epoch in range(num_epochs):
    SOH_predicted = model(N.float())
    loss = criterion(SOH_predicted,SOH_actual)
    loss.backward()
    optimizer.step()
    optimizer.zero_grad()
    
    if (epoch+1)%10 == 0:
        print (f'epoch: {epoch+1}, loss = {loss.item():.4f}')
#graph
predicted = model(N).detach().numpy() #matplotlib only takes numpy arrays
graph.plot(x, SOH, 'ro')#ro means red dots
graph.plot(x, predicted, 'b')
graph.show()
